syntax = "proto3";

package tailor.v1;

import "tailor/v1/ai.proto";
import "tailor/v1/application.proto";
import "tailor/v1/auth.proto";
import "tailor/v1/events.proto";
import "tailor/v1/executor.proto";
import "tailor/v1/function.proto";
import "tailor/v1/idp.proto";
import "tailor/v1/meter.proto";
import "tailor/v1/pipeline.proto";
import "tailor/v1/secret_manager.proto";
import "tailor/v1/stateflow.proto";
import "tailor/v1/staticwebsite.proto";
import "tailor/v1/tailordb.proto";
import "tailor/v1/workflow.proto";
import "tailor/v1/workspace.proto";

service OperatorService {
  // Ping does nothing but for checking OperatorService is available.
  rpc Ping(PingRequest) returns (PingResponse) {}

  // Workspace -------------------------------------------------------

  // ListAvailableWorkspaceRegions returns available regions for workspace creation.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  rpc ListAvailableWorkspaceRegions(ListAvailableWorkspaceRegionsRequest) returns (ListAvailableWorkspaceRegionsResponse) {}

  // CreateWorkspace creates a new workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {}

  // UpdateWorkspace updates a workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view workspace but no permission to update
  // - NotFound: workspace does not exist or can not be accessed
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse) {}

  // DeleteWorkspace deletes a workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view workspace but no permission to delete
  // - NotFound: workspace does not exist or can not be accessed
  rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse) {}

  // ListWorkspaces returns workspaces that the current platform user has
  // access.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {}

  // ListOrganizationWorkspaces returns workspaces in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListOrganizationWorkspaces(ListOrganizationWorkspacesRequest) returns (ListOrganizationWorkspacesResponse) {}

  // RestoreWorkspace restores a workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: no permission to restore
  // - NotFound: workspace does not exist or can not be accessed
  rpc RestoreWorkspace(RestoreWorkspaceRequest) returns (RestoreWorkspaceResponse) {}

  // GetWorkspace returns a workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {}

  // ListWorkspacePlatformUsers lists platform users to the workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc ListWorkspacePlatformUsers(ListWorkspacePlatformUsersRequest) returns (ListWorkspacePlatformUsersResponse) {}

  // ListAvailableWorkspacePlatformUserRoles lists available roles.
  rpc ListAvailableWorkspacePlatformUserRoles(ListAvailableWorkspacePlatformUserRolesRequest) returns (ListAvailableWorkspacePlatformUserRolesResponse) {}

  // InviteWorkspacePlatformUser invites a platform user to the workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view workspace but no permission to invite a
  // - NotFound: workspace does not exist or can not be accessed
  rpc InviteWorkspacePlatformUser(InviteWorkspacePlatformUserRequest) returns (InviteWorkspacePlatformUserResponse) {}

  // RemoveWorkspacePlatformUser removes a platform user from the workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view workspace but no permission to remove
  // - NotFound: workspace does not exist or can not be accessed, or user does
  // not exist in the workspace
  rpc RemoveWorkspacePlatformUser(RemoveWorkspacePlatformUserRequest) returns (RemoveWorkspacePlatformUserResponse) {}

  // UpdateWorkspacePlatformUser update workspace platform user.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view workspace but no permission to update
  // - NotFound: workspace does not exist or can not be accessed
  rpc UpdateWorkspacePlatformUser(UpdateWorkspacePlatformUserRequest) returns (UpdateWorkspacePlatformUserResponse) {}

  // GetWorkspacePlatformUser returns a workspace platform user.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc GetWorkspacePlatformUser(GetWorkspacePlatformUserRequest) returns (GetWorkspacePlatformUserResponse) {}

  // GetWorkspaceRole returns a workspace role of the platform user.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc GetWorkspaceRole(GetWorkspaceRoleRequest) returns (GetWorkspaceRoleResponse) {}

  // Organization -----------------------------------------------------

  // UpdateOrganization updates an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {}

  // GetOrganization returns an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {}

  // ListOrganizations returns organizations that the current platform user has
  // access.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {}

  // ListUserOrganizations returns organizations and guest organizations that a current platform user has access.
  //
  rpc ListUserOrganizations(ListUserOrganizationsRequest) returns (ListUserOrganizationsResponse) {}

  // GrantOrganizationAccess grants access to an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to grant access
  // - NotFound: organization does not exist or can not be accessed
  rpc GrantOrganizationAccess(GrantOrganizationAccessRequest) returns (GrantOrganizationAccessResponse) {}

  // UpdateOrganizationAccess updates access to an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update access
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganizationAccess(UpdateOrganizationAccessRequest) returns (UpdateOrganizationAccessResponse) {}

  // RevokeOrganizationAccess revokes access to an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to revoke access
  // - NotFound: organization does not exist or can not be accessed
  rpc RevokeOrganizationAccess(RevokeOrganizationAccessRequest) returns (RevokeOrganizationAccessResponse) {}

  // ListOrganizationAccesses returns list of access to an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc ListOrganizationAccesses(ListOrganizationAccessesRequest) returns (ListOrganizationAccessesResponse) {}

  // GetOrganizationAccess returns access to an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganizationAccess(GetOrganizationAccessRequest) returns (GetOrganizationAccessResponse) {}

  // Organization - Folder --------------------------------------------

  // CreateOrganizationFolder creates a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to create
  // - NotFound: organization does not exist or can not be accessed
  rpc CreateOrganizationFolder(CreateOrganizationFolderRequest) returns (CreateOrganizationFolderResponse) {}

  // UpdateOrganizationFolder updates a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganizationFolder(UpdateOrganizationFolderRequest) returns (UpdateOrganizationFolderResponse) {}

  // DeleteOrganizationFolder deletes a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to delete
  // - NotFound: organization does not exist or can not be accessed
  rpc DeleteOrganizationFolder(DeleteOrganizationFolderRequest) returns (DeleteOrganizationFolderResponse) {}

  // GetOrganizationFolder returns a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganizationFolder(GetOrganizationFolderRequest) returns (GetOrganizationFolderResponse) {}

  // ListOrganizationFolders returns folders in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListOrganizationFolders(ListOrganizationFoldersRequest) returns (ListOrganizationFoldersResponse) {}

  // GrantOrganizationFolderAccess grants access to a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to grant access
  // - NotFound: organization does not exist or can not be accessed
  rpc GrantOrganizationFolderAccess(GrantOrganizationFolderAccessRequest) returns (GrantOrganizationFolderAccessResponse) {}

  // UpdateOrganizationFolderAccess updates access to a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update access
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganizationFolderAccess(UpdateOrganizationFolderAccessRequest) returns (UpdateOrganizationFolderAccessResponse) {}

  // RevokeOrganizationFolderAccess revokes access to a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to revoke access
  // - NotFound: organization does not exist or can not be accessed
  rpc RevokeOrganizationFolderAccess(RevokeOrganizationFolderAccessRequest) returns (RevokeOrganizationFolderAccessResponse) {}

  // ListOrganizationFolderAccesses returns list of access to a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc ListOrganizationFolderAccesses(ListOrganizationFolderAccessesRequest) returns (ListOrganizationFolderAccessesResponse) {}

  // GetOrganizationFolderAccess returns access to a folder in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganizationFolderAccess(GetOrganizationFolderAccessRequest) returns (GetOrganizationFolderAccessResponse) {}

  // Organization - Team ----------------------------------------------

  // CreateOrganizationTeam creates a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to create
  // - NotFound: organization does not exist or can not be accessed
  rpc CreateOrganizationTeam(CreateOrganizationTeamRequest) returns (CreateOrganizationTeamResponse) {}

  // UpdateOrganizationTeam updates a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganizationTeam(UpdateOrganizationTeamRequest) returns (UpdateOrganizationTeamResponse) {}

  // DeleteOrganizationTeam deletes a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to delete
  // - NotFound: organization does not exist or can not be accessed
  rpc DeleteOrganizationTeam(DeleteOrganizationTeamRequest) returns (DeleteOrganizationTeamResponse) {}

  // GetOrganizationTeam returns a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganizationTeam(GetOrganizationTeamRequest) returns (GetOrganizationTeamResponse) {}

  // ListOrganizationTeams returns teams in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc ListOrganizationTeams(ListOrganizationTeamsRequest) returns (ListOrganizationTeamsResponse) {}

  // AddOrganizationTeamMember adds a member to a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to add
  // - NotFound: organization does not exist or can not be accessed
  rpc AddOrganizationTeamMember(AddOrganizationTeamMemberRequest) returns (AddOrganizationTeamMemberResponse) {}

  // UpdateOrganizationTeamMember updates a member in a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to update
  // - NotFound: organization does not exist or can not be accessed
  rpc UpdateOrganizationTeamMember(UpdateOrganizationTeamMemberRequest) returns (UpdateOrganizationTeamMemberResponse) {}

  // RemoveOrganizationTeamMember removes a member from a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view organization but no permission to remove
  // - NotFound: organization does not exist or can not be accessed
  rpc RemoveOrganizationTeamMember(RemoveOrganizationTeamMemberRequest) returns (RemoveOrganizationTeamMemberResponse) {}

  // ListOrganizationTeamMembers lists members in a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc ListOrganizationTeamMembers(ListOrganizationTeamMembersRequest) returns (ListOrganizationTeamMembersResponse) {}

  // GetOrganizationTeamMember returns a member in a team in an organization.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: organization does not exist or can not be accessed
  rpc GetOrganizationTeamMember(GetOrganizationTeamMemberRequest) returns (GetOrganizationTeamMemberResponse) {}

  // Account -------------------------------------------------------------

  // GetPlatformAccountPlan returns the platform account plan.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc GetPlatformAccountPlan(GetPlatformAccountPlanRequest) returns (GetPlatformAccountPlanResponse) {}

  // Application -----------------------------------------------------

  // CreateApplication creates a new application in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - PermissionDenied: can view workspace but no permission to remove
  // - InvalidArgument: request is invalid
  rpc CreateApplication(CreateApplicationRequest) returns (CreateApplicationResponse) {}

  // UpdateApplication updates an application.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view application but no permission to remove
  // - NotFound: application does not exist or can not be accessed
  rpc UpdateApplication(UpdateApplicationRequest) returns (UpdateApplicationResponse) {}

  // DeleteApplication deletes an application.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - PermissionDenied: can view application but no permission to remove
  // - NotFound: application does not exist or can not be accessed
  rpc DeleteApplication(DeleteApplicationRequest) returns (DeleteApplicationResponse) {}

  // ListApplications returns applications in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {}

  // GetApplication returns a application.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: application does not exist or can not be accessed
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {}

  // GetApplicationSchemaHealth returns the application's schema health
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: application does not exist or can not be accessed
  rpc GetApplicationSchemaHealth(GetApplicationSchemaHealthRequest) returns (GetApplicationSchemaHealthResponse) {}

  // TailorDB --------------------------------------------------------

  // ComposeTailorDBSDL returns the GraphQL schema of a TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: application does not exist or can not be accessed
  rpc ComposeTailorDBSDL(ComposeTailorDBSDLRequest) returns (ComposeTailorDBSDLResponse) {}

  // CreateTailorDBService creates a new TailorDB service in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - AlreadyExists: TailorDB with the namespace already exists
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateTailorDBService(CreateTailorDBServiceRequest) returns (CreateTailorDBServiceResponse) {}

  // UpdateTailorDBService updates a TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc UpdateTailorDBService(UpdateTailorDBServiceRequest) returns (UpdateTailorDBServiceResponse) {}

  // DeleteTailorDBService deletes an TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc DeleteTailorDBService(DeleteTailorDBServiceRequest) returns (DeleteTailorDBServiceResponse) {}

  // GetTailorDBService get a TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc GetTailorDBService(GetTailorDBServiceRequest) returns (GetTailorDBServiceResponse) {}

  // ListTailorDBServices lists TailorDB services in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListTailorDBServices(ListTailorDBServicesRequest) returns (ListTailorDBServicesResponse) {}

  // CreateTailorDBType creates a TailorDB type in a given TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc CreateTailorDBType(CreateTailorDBTypeRequest) returns (CreateTailorDBTypeResponse) {}

  // UpdateTailorDBType updates a TailorDB type in a given TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB type does not exist or can not be accessed
  rpc UpdateTailorDBType(UpdateTailorDBTypeRequest) returns (UpdateTailorDBTypeResponse) {}

  // DeleteTailorDBType deletes a TailorDB type.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc DeleteTailorDBType(DeleteTailorDBTypeRequest) returns (DeleteTailorDBTypeResponse) {}

  // TruncateTailorDBTypes truncates all TailorDB types in a namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc TruncateTailorDBTypes(TruncateTailorDBTypesRequest) returns (TruncateTailorDBTypesResponse) {}

  // TruncateTailorDBType truncates a TailorDB type.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB type does not exist or can not be accessed
  rpc TruncateTailorDBType(TruncateTailorDBTypeRequest) returns (TruncateTailorDBTypeResponse) {}

  // ListTailorDBTypes returns TailorDB types in a given TailorDB service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc ListTailorDBTypes(ListTailorDBTypesRequest) returns (ListTailorDBTypesResponse) {}

  // GetTailorDBType returns a TailorDB type.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB type does not exist or can not be accessed
  rpc GetTailorDBType(GetTailorDBTypeRequest) returns (GetTailorDBTypeResponse) {}

  // CreateTailorDBGQLPermission creates the permission configuration for the type.
  //
  // [Errors]
  // - InvalidArgument: request is invalid
  // - NotFound: type does not exist
  rpc CreateTailorDBGQLPermission(CreateTailorDBGQLPermissionRequest) returns (CreateTailorDBGQLPermissionResponse) {}

  // GetTailorDBGQLPermission returns the permission configuration for the type.
  //
  // [Errors]
  // - InvalidArgument: request is invalid
  // - NotFound: type does not exist
  rpc GetTailorDBGQLPermission(GetTailorDBGQLPermissionRequest) returns (GetTailorDBGQLPermissionResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // ListTailorDBGQLPermissions lists the permission configurations in a given TailorDB service.
  //
  // [Errors]
  // - InvalidArgument: request is invalid
  // - NotFound: TailorDB service does not exist or can not be accessed
  rpc ListTailorDBGQLPermissions(ListTailorDBGQLPermissionsRequest) returns (ListTailorDBGQLPermissionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // UpdateTailorDBGQLPermission updates the permission configuration for the type.
  //
  // [Errors]
  // - InvalidArgument: request is invalid
  // - NotFound: type does not exist
  rpc UpdateTailorDBGQLPermission(UpdateTailorDBGQLPermissionRequest) returns (UpdateTailorDBGQLPermissionResponse) {}

  // DeleteTailorDBGQLPermission deletes the permission configuration for the type.
  //
  // [Errors]
  // - InvalidArgument: request is invalid
  // - NotFound: type does not exist
  rpc DeleteTailorDBGQLPermission(DeleteTailorDBGQLPermissionRequest) returns (DeleteTailorDBGQLPermissionResponse) {}

  // Pipeline --------------------------------------------------------

  // CreatePipelineService creates a new pipeline service in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - AlreadyExists: pipeline with the namespace already exists
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreatePipelineService(CreatePipelineServiceRequest) returns (CreatePipelineServiceResponse) {}

  // UpdatePipelineService updates a pipeline service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc UpdatePipelineService(UpdatePipelineServiceRequest) returns (UpdatePipelineServiceResponse) {}

  // DeletePipelineService deletes a pipeline service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc DeletePipelineService(DeletePipelineServiceRequest) returns (DeletePipelineServiceResponse) {}

  // GetPipelineService gets a pipeline service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc GetPipelineService(GetPipelineServiceRequest) returns (GetPipelineServiceResponse) {}

  // ListPipelineServices lists pipeline services in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListPipelineServices(ListPipelineServicesRequest) returns (ListPipelineServicesResponse) {}

  // GetPipelineResolver returns a pipeline resolver in a given pipeline
  // service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline resolver does not exist or can not be accessed
  rpc GetPipelineResolver(GetPipelineResolverRequest) returns (GetPipelineResolverResponse) {}

  // ListPipelineResolvers returns pipeline resolvers in a given pipeline
  // service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc ListPipelineResolvers(ListPipelineResolversRequest) returns (ListPipelineResolversResponse) {}

  // CreatePipelineResolver create pipeline resolvers in a given pipeline
  // service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc CreatePipelineResolver(CreatePipelineResolverRequest) returns (CreatePipelineResolverResponse) {}

  // UpdatePipelineResolver update pipeline resolvers.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc UpdatePipelineResolver(UpdatePipelineResolverRequest) returns (UpdatePipelineResolverResponse) {}

  // DeletePipelineResolver delete pipeline resolvers.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc DeletePipelineResolver(DeletePipelineResolverRequest) returns (DeletePipelineResolverResponse) {}

  // ComposePipelineSDL composes the pipeline SDL.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline service does not exist or can not be accessed
  rpc ComposePipelineSDL(ComposePipelineSDLRequest) returns (ComposePipelineSDLResponse) {}

  // ListPipelineResolverExecutionResults list all resolver execution results.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListPipelineResolverExecutionResults(ListPipelineResolverExecutionResultsRequest) returns (ListPipelineResolverExecutionResultsResponse) {}

  // GetPipelineResolverExecutionResult gets a resolver execution result.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc GetPipelineResolverExecutionResult(GetPipelineResolverExecutionResultRequest) returns (GetPipelineResolverExecutionResultResponse) {}

  // RestartPipelineResolver restarts a pipeline resolver.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: pipeline resolver does not exist or can not be accessed
  rpc RestartPipelineResolver(RestartPipelineResolverRequest) returns (RestartPipelineResolverResponse) {}

  // Stateflow -------------------------------------------------------

  // CreateStateflowService creates a new stateflow service in a given
  // workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - AlreadyExists: stateflow with the namespace already exists
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateStateflowService(CreateStateflowServiceRequest) returns (CreateStateflowServiceResponse) {}

  // UpdateStateflowService updates a stateflow service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: stateflow service does not exist or can not be accessed
  rpc UpdateStateflowService(UpdateStateflowServiceRequest) returns (UpdateStateflowServiceResponse) {}

  // DeleteStateflowService deletes a stateflow service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: stateflow service does not exist or can not be accessed
  rpc DeleteStateflowService(DeleteStateflowServiceRequest) returns (DeleteStateflowServiceResponse) {}

  // GetStateflowService get a stateflow service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: stateflow service does not exist or can not be accessed
  rpc GetStateflowService(GetStateflowServiceRequest) returns (GetStateflowServiceResponse) {}

  // ListStateflowServices get stateflow services.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListStateflowServices(ListStateflowServicesRequest) returns (ListStateflowServicesResponse) {}

  // Executor -------------------------------------------------------

  // CreateExecutorExecutor creates a new executor executor.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor service does not exist or can not be accessed
  rpc CreateExecutorExecutor(CreateExecutorExecutorRequest) returns (CreateExecutorExecutorResponse) {}

  // UpdateExecutorExecutor updates a executor executor.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor executor does not exist or can not be accessed
  rpc UpdateExecutorExecutor(UpdateExecutorExecutorRequest) returns (UpdateExecutorExecutorResponse) {}

  // GetExecutorExecutor gets a executor executor.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor executor does not exist or can not be accessed
  rpc GetExecutorExecutor(GetExecutorExecutorRequest) returns (GetExecutorExecutorResponse) {}

  // DeleteExecutorExecutor deletes a executor executor.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor executor does not exist or can not be accessed
  rpc DeleteExecutorExecutor(DeleteExecutorExecutorRequest) returns (DeleteExecutorExecutorResponse) {}

  // ListExecutorExecutors returns executor executors.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor service does not exist or can not be accessed
  rpc ListExecutorExecutors(ListExecutorExecutorsRequest) returns (ListExecutorExecutorsResponse) {}

  // GetExecutorJob gets executor job.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: executor job does not exist or can not be accessed
  rpc GetExecutorJob(GetExecutorJobRequest) returns (GetExecutorJobResponse) {}

  // ListExecutorJobs returns executor jobs.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListExecutorJobs(ListExecutorJobsRequest) returns (ListExecutorJobsResponse) {}

  // ListExecutorJobAttempts returns executor job attempts.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListExecutorJobAttempts(ListExecutorJobAttemptsRequest) returns (ListExecutorJobAttemptsResponse) {}

  // ListExecutorIncomingWebhooks lists incoming webhooks for the workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListExecutorIncomingWebhooks(ListExecutorIncomingWebhooksRequest) returns (ListExecutorIncomingWebhooksResponse) {}

  // GetExecutorIncomingWebhook gets an incoming webhook.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc GetExecutorIncomingWebhook(GetExecutorIncomingWebhookRequest) returns (GetExecutorIncomingWebhookResponse) {}

  // SecretManager ---------------------------------------------------

  // CreateSecretManagerVault creates a vault in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc CreateSecretManagerVault(CreateSecretManagerVaultRequest) returns (CreateSecretManagerVaultResponse) {}

  // GetSecretManagerVault gets a vault.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: vault does not exist or can not be accessed
  rpc GetSecretManagerVault(GetSecretManagerVaultRequest) returns (GetSecretManagerVaultResponse) {}

  // DeleteSecretManagerVault deletes a vault in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc DeleteSecretManagerVault(DeleteSecretManagerVaultRequest) returns (DeleteSecretManagerVaultResponse) {}

  // ListSecretManagerVaults lists vaults in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListSecretManagerVaults(ListSecretManagerVaultsRequest) returns (ListSecretManagerVaultsResponse) {}

  // CreateSecretManagerSecret creates a secret in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc CreateSecretManagerSecret(CreateSecretManagerSecretRequest) returns (CreateSecretManagerSecretResponse) {}

  // UpdateSecretManagerSecret updates a secret in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc UpdateSecretManagerSecret(UpdateSecretManagerSecretRequest) returns (UpdateSecretManagerSecretResponse) {}

  // GetSecretManagerSecret gets a secret in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: secret does not exist or can not be accessed
  rpc GetSecretManagerSecret(GetSecretManagerSecretRequest) returns (GetSecretManagerSecretResponse) {}

  // DeleteSecretManagerSecret deletes a secret in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc DeleteSecretManagerSecret(DeleteSecretManagerSecretRequest) returns (DeleteSecretManagerSecretResponse) {}

  // ListSecretManagerSecrets lists secrets in SecretManagerService.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListSecretManagerSecrets(ListSecretManagerSecretsRequest) returns (ListSecretManagerSecretsResponse) {}

  // Auth ------------------------------------------------------------

  // CreateAuthService creates a new auth service in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - AlreadyExists: auth service with the namespace already exists
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateAuthService(CreateAuthServiceRequest) returns (CreateAuthServiceResponse) {}

  // DeleteAuthService deletes an auth service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: auth service does not exist or can not be accessed
  rpc DeleteAuthService(DeleteAuthServiceRequest) returns (DeleteAuthServiceResponse) {}

  // GetAuthService returns an auth service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: auth service does not exist or can not be accessed
  rpc GetAuthService(GetAuthServiceRequest) returns (GetAuthServiceResponse) {}

  // ListAuthServices returns auth services in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListAuthServices(ListAuthServicesRequest) returns (ListAuthServicesResponse) {}

  // CreateAuthIDPConfig creates an IDP config in a given auth service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: auth service does not exist or can not be accessed
  rpc CreateAuthIDPConfig(CreateAuthIDPConfigRequest) returns (CreateAuthIDPConfigResponse) {}

  // UpdateAuthIDPConfig updates an IDP config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: IDP config does not exist or can not be accessed
  rpc UpdateAuthIDPConfig(UpdateAuthIDPConfigRequest) returns (UpdateAuthIDPConfigResponse) {}

  // DeleteAuthIDPConfig deletes an IDP config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: IDP config does not exist or can not be accessed
  rpc DeleteAuthIDPConfig(DeleteAuthIDPConfigRequest) returns (DeleteAuthIDPConfigResponse) {}

  // GetAuthIDPConfig gets an IDP config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: IDP config does not exist or can not be accessed
  rpc GetAuthIDPConfig(GetAuthIDPConfigRequest) returns (GetAuthIDPConfigResponse) {}

  // ListAuthIDPConfigs lists IDP configs in a given auth service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListAuthIDPConfigs(ListAuthIDPConfigsRequest) returns (ListAuthIDPConfigsResponse) {}

  // CreateUserProfileConfig creates a user profile config in a given auth
  // service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: auth service does not exist or can not be accessed
  rpc CreateUserProfileConfig(CreateUserProfileConfigRequest) returns (CreateUserProfileConfigResponse) {}

  // UpdateUserProfileConfig updates a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc UpdateUserProfileConfig(UpdateUserProfileConfigRequest) returns (UpdateUserProfileConfigResponse) {}

  // DeleteUserProfileConfig deletes a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc DeleteUserProfileConfig(DeleteUserProfileConfigRequest) returns (DeleteUserProfileConfigResponse) {}

  // GetUserProfileConfig deletes a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc GetUserProfileConfig(GetUserProfileConfigRequest) returns (GetUserProfileConfigResponse) {}

  // CreateUserProfileConfig creates a user profile config in a given auth
  // service.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: auth service does not exist or can not be accessed
  rpc CreateTenantConfig(CreateTenantConfigRequest) returns (CreateTenantConfigResponse) {}

  // UpdateUserProfileConfig updates a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc UpdateTenantConfig(UpdateTenantConfigRequest) returns (UpdateTenantConfigResponse) {}

  // DeleteUserProfileConfig deletes a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc DeleteTenantConfig(DeleteTenantConfigRequest) returns (DeleteTenantConfigResponse) {}

  // GetUserProfileConfig deletes a user profile config.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: user profile config does not exist or can not be accessed
  rpc GetTenantConfig(GetTenantConfigRequest) returns (GetTenantConfigResponse) {}

  // Auth -- Personal Access Token
  // CreatePersonalAccessToken creates a new personal access token.
  rpc CreatePersonalAccessToken(CreatePersonalAccessTokenRequest) returns (CreatePersonalAccessTokenResponse) {}

  // DeletePersonalAccessToken deletes a personal access token.
  rpc DeletePersonalAccessToken(DeletePersonalAccessTokenRequest) returns (DeletePersonalAccessTokenResponse) {}

  // ListPersonalAccessTokens lists all personal access tokens.
  rpc ListPersonalAccessTokens(ListPersonalAccessTokensRequest) returns (ListPersonalAccessTokensResponse) {}

  // Auth -- MachineUser
  // CreateAuthMachineUser creates a new machine user.
  rpc CreateAuthMachineUser(CreateAuthMachineUserRequest) returns (CreateAuthMachineUserResponse) {}

  // UpdateAuthMachineUser updates a machine user.
  rpc UpdateAuthMachineUser(UpdateAuthMachineUserRequest) returns (UpdateAuthMachineUserResponse) {}

  // DeleteAuthMachineUser deletes a machine user.
  rpc DeleteAuthMachineUser(DeleteAuthMachineUserRequest) returns (DeleteAuthMachineUserResponse) {}

  // GetAuthMachineUser gets a machine user.
  rpc GetAuthMachineUser(GetAuthMachineUserRequest) returns (GetAuthMachineUserResponse) {}

  // ListAuthMachineUsers lists all machine users.
  rpc ListAuthMachineUsers(ListAuthMachineUsersRequest) returns (ListAuthMachineUsersResponse) {}

  // CreateAuthSCIMConfig creates SCIM config for the auth namespace.
  rpc CreateAuthSCIMConfig(CreateAuthSCIMConfigRequest) returns (CreateAuthSCIMConfigResponse) {}

  // UpdateAuthSCIMConfig updates the SCIM config for the auth namespace.
  rpc UpdateAuthSCIMConfig(UpdateAuthSCIMConfigRequest) returns (UpdateAuthSCIMConfigResponse) {}

  // DeleteAuthSCIMConfig deletes the SCIM config for the auth namespace.
  rpc DeleteAuthSCIMConfig(DeleteAuthSCIMConfigRequest) returns (DeleteAuthSCIMConfigResponse) {}

  // GetAuthSCIMConfig gets the SCIM config for the auth namespace.
  rpc GetAuthSCIMConfig(GetAuthSCIMConfigRequest) returns (GetAuthSCIMConfigResponse) {}

  // CreateAuthSCIMResource creates a SCIM Resource in a given auth service.
  rpc CreateAuthSCIMResource(CreateAuthSCIMResourceRequest) returns (CreateAuthSCIMResourceResponse) {}

  // UpdateAuthSCIMResource updates a SCIM Resource.
  rpc UpdateAuthSCIMResource(UpdateAuthSCIMResourceRequest) returns (UpdateAuthSCIMResourceResponse) {}

  // DeleteAuthSCIMResource deletes a SCIM Resource.
  rpc DeleteAuthSCIMResource(DeleteAuthSCIMResourceRequest) returns (DeleteAuthSCIMResourceResponse) {}

  // GetAuthSCIMResource gets a SCIM Resource.
  rpc GetAuthSCIMResource(GetAuthSCIMResourceRequest) returns (GetAuthSCIMResourceResponse) {}

  // GetAuthSCIMResources get SCIM Resources.
  rpc GetAuthSCIMResources(GetAuthSCIMResourcesRequest) returns (GetAuthSCIMResourcesResponse) {}

  // CreateAuthConnection creates a new auth connection.
  rpc CreateAuthConnection(CreateAuthConnectionRequest) returns (CreateAuthConnectionResponse) {}

  // ListAuthConnections lists all auth connections.
  rpc ListAuthConnections(ListAuthConnectionsRequest) returns (ListAuthConnectionsResponse) {}

  // RevokeAuthConnection revokes an auth connection.
  rpc RevokeAuthConnection(RevokeAuthConnectionRequest) returns (RevokeAuthConnectionResponse) {}

  // RegisterAuthConnectionSession creates a new auth connection.
  rpc RegisterAuthConnectionSession(RegisterAuthConnectionSessionRequest) returns (RegisterAuthConnectionSessionResponse) {}

  // CreateAuthOAuth2Client creates a new auth OAuth2 client.
  rpc CreateAuthOAuth2Client(CreateAuthOAuth2ClientRequest) returns (CreateAuthOAuth2ClientResponse) {}

  // UpdateAuthOAuth2Client updates a auth OAuth2 client.
  rpc UpdateAuthOAuth2Client(UpdateAuthOAuth2ClientRequest) returns (UpdateAuthOAuth2ClientResponse) {}

  // DeleteAuthOAuth2Client deletes a auth OAuth2 client.
  rpc DeleteAuthOAuth2Client(DeleteAuthOAuth2ClientRequest) returns (DeleteAuthOAuth2ClientResponse) {}

  // GetAuthOAuth2Client gets a auth OAuth2 client.
  rpc GetAuthOAuth2Client(GetAuthOAuth2ClientRequest) returns (GetAuthOAuth2ClientResponse) {}

  // ListAuthOAuth2Client lists auth OAuth2 clients.
  rpc ListAuthOAuth2Clients(ListAuthOAuth2ClientsRequest) returns (ListAuthOAuth2ClientsResponse) {}

  // Events ---------------------------------------------------------
  // ListDataplaneEvents lists dataplane events in a given workspace.
  rpc ListDataplaneEvents(ListDataplaneEventsRequest) returns (ListDataplaneEventsResponse) {}

  // ListControlplaneActivityLogs lists controlplane activity logs in a given workspace.
  rpc ListControlplaneActivityLogs(ListControlplaneActivityLogsRequest) returns (ListControlplaneActivityLogsResponse) {}

  // Function ---------------------------------------------------------
  // TestExecScript executes specified JavaScript code in which I/O operations are allowed and returns the result.
  rpc TestExecScript(TestExecScriptRequest) returns (TestExecScriptResponse) {}

  // GetFunctionExecution gets function execution.
  rpc GetFunctionExecution(GetFunctionExecutionRequest) returns (GetFunctionExecutionResponse) {}

  // ListFunctionExecutions lists function executions.
  rpc ListFunctionExecutions(ListFunctionExecutionsRequest) returns (ListFunctionExecutionsResponse) {}

  // AI ------------------------------------------------------------

  // CreateAiService creates a new ai service in a given workspace.
  rpc CreateAiService(CreateAiServiceRequest) returns (CreateAiServiceResponse) {}

  // ListAiServices lists ai services in a given workspace.
  rpc ListAiServices(ListAiServicesRequest) returns (ListAiServicesResponse) {}

  // GetAiService gets an ai service.
  rpc GetAiService(GetAiServiceRequest) returns (GetAiServiceResponse) {}

  // DeleteAiService deletes an ai service.
  rpc DeleteAiService(DeleteAiServiceRequest) returns (DeleteAiServiceResponse) {}

  // CreateAiTask creates a new ai task in a given ai service.
  rpc CreateAiTask(CreateAiTaskRequest) returns (CreateAiTaskResponse) {}

  // ListAiTasks lists ai tasks in a given ai service.
  rpc ListAiTasks(ListAiTasksRequest) returns (ListAiTasksResponse) {}

  // GetAiTask gets an ai task.
  rpc GetAiTask(GetAiTaskRequest) returns (GetAiTaskResponse) {}

  // UpdateAiTask updates an ai task.
  rpc UpdateAiTask(UpdateAiTaskRequest) returns (UpdateAiTaskResponse) {}

  // DeleteAiTask deletes an ai task.
  rpc DeleteAiTask(DeleteAiTaskRequest) returns (DeleteAiTaskResponse) {}

  // Meter -----------------------------------------------------------

  // ListMeterRequestCounts returns request counts per application in a workspace.
  rpc ListMeterRequestCounts(ListMeterRequestCountsRequest) returns (ListMeterRequestCountsResponse) {}

  // ListMeterExecutionCounts returns execution counts per service in a workspace.
  rpc ListMeterExecutionCounts(ListMeterExecutionCountsRequest) returns (ListMeterExecutionCountsResponse) {}

  // ListMeterEventCounts returns event counts per service in a workspace.
  rpc ListMeterEventCounts(ListMeterEventCountsRequest) returns (ListMeterEventCountsResponse) {}

  // IdP ------------------------------------------------------------

  // ListIdPServices list all namespaces under a workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc ListIdPServices(ListIdPServicesRequest) returns (ListIdPServicesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // CreateIdPService creates a new idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateIdPService(CreateIdPServiceRequest) returns (CreateIdPServiceResponse) {}

  // UpdateIdPService updates the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc UpdateIdPService(UpdateIdPServiceRequest) returns (UpdateIdPServiceResponse) {}

  // DeleteIdPService deletes the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: namespace does not exist or can not be accessed
  rpc DeleteIdPService(DeleteIdPServiceRequest) returns (DeleteIdPServiceResponse) {}

  // GetIdPService returns an idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: idp namespace does not exist or can not be accessed
  rpc GetIdPService(GetIdPServiceRequest) returns (GetIdPServiceResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // ListIdPClients lists all clients for the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: idp namespace does not exist or can not be accessed
  rpc ListIdPClients(ListIdPClientsRequest) returns (ListIdPClientsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // CreateIdPClient creates client for the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: idp namespace does not exist or can not be accessed
  rpc CreateIdPClient(CreateIdPClientRequest) returns (CreateIdPClientResponse) {}

  // DeleteIdPClient deletes the client for the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: client does not exist or can not be accessed
  rpc DeleteIdPClient(DeleteIdPClientRequest) returns (DeleteIdPClientResponse) {}

  // GetIdPClient gets the client for the idp namespace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: client does not exist or can not be accessed
  rpc GetIdPClient(GetIdPClientRequest) returns (GetIdPClientResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // StaticWebsite -------------------------------------------------

  // CreateStaticWebsite creates a new staticwebsite.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateStaticWebsite(CreateStaticWebsiteRequest) returns (CreateStaticWebsiteResponse) {}

  // UpdateStaticWebsite updates the staticwebsite.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: staticwebsite does not exist or can not be accessed
  rpc UpdateStaticWebsite(UpdateStaticWebsiteRequest) returns (UpdateStaticWebsiteResponse) {}

  // DeleteStaticWebsite deletes the staticwebsite.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: staticwebsite does not exist or can not be accessed
  rpc DeleteStaticWebsite(DeleteStaticWebsiteRequest) returns (DeleteStaticWebsiteResponse) {}

  // GetStaticWebsite returns an staticwebsite.
  //
  // [Errors]
  // - Unauthenticated: token is expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: staticwebsite does not exist or can not be accessed
  rpc GetStaticWebsite(GetStaticWebsiteRequest) returns (GetStaticWebsiteResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // ListStaticWebsites returns staticwebsites.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc ListStaticWebsites(ListStaticWebsitesRequest) returns (ListStaticWebsitesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Workflow ---------------------------------------------------------

  // CreateWorkflow creates a new workflow.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse) {}

  // UpdateWorkflow updates a workflow.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workflow does not exist or can not be accessed
  rpc UpdateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse) {}

  // DeleteWorkflow deletes a workflow.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workflow does not exist or can not be accessed
  rpc DeleteWorkflow(DeleteWorkflowRequest) returns (DeleteWorkflowResponse) {}

  // GetWorkflow returns a workflow.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workflow does not exist or can not be accessed
  rpc GetWorkflow(GetWorkflowRequest) returns (GetWorkflowResponse) {}

  // GetWorkflowByName returns a workflow by name.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workflow does not exist or can not be accessed
  rpc GetWorkflowByName(GetWorkflowByNameRequest) returns (GetWorkflowByNameResponse) {}

  // ListWorkflows returns workflows in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {}

  // CreateWorkflowJobFunction creates a new workflow job function.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: workspace does not exist or can not be accessed
  rpc CreateWorkflowJobFunction(CreateWorkflowJobFunctionRequest) returns (CreateWorkflowJobFunctionResponse) {}

  // UpdateWorkflowJobFunction updates a workflow job function.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: job function does not exist or can not be accessed
  rpc UpdateWorkflowJobFunction(UpdateWorkflowJobFunctionRequest) returns (UpdateWorkflowJobFunctionResponse) {}

  // GetWorkflowJobFunction returns a workflow job function.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: job function does not exist or can not be accessed
  rpc GetWorkflowJobFunction(GetWorkflowJobFunctionRequest) returns (GetWorkflowJobFunctionResponse) {}

  // GetWorkflowJobFunctionByName returns a workflow job function by name.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: job function does not exist or can not be accessed
  rpc GetWorkflowJobFunctionByName(GetWorkflowJobFunctionByNameRequest) returns (GetWorkflowJobFunctionByNameResponse) {}

  // ListWorkflowJobFunctions returns workflow job functions in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListWorkflowJobFunctions(ListWorkflowJobFunctionsRequest) returns (ListWorkflowJobFunctionsResponse) {}

  // GetWorkflowExecution returns a workflow execution.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  // - NotFound: execution does not exist or can not be accessed
  rpc GetWorkflowExecution(GetWorkflowExecutionRequest) returns (GetWorkflowExecutionResponse) {}

  // ListWorkflowExecutions returns workflow executions in a given workspace.
  //
  // [Errors]
  // - Unauthenticated: token is missing, expired, or invalid
  // - InvalidArgument: request is invalid
  rpc ListWorkflowExecutions(ListWorkflowExecutionsRequest) returns (ListWorkflowExecutionsResponse) {}
}

message PingRequest {}
message PingResponse {}
